#!/usr/bin/env ruby

require 'nokogiri'
require 'open-uri'

# Required environment variables
Feed_local_dir = Pathname(ENV['FEED_LOCAL_DIR']) rescue nil

unless Feed_local_dir&.directory? && Feed_local_dir&.writable?
  abort <<~ERROR
    Missing a "FEED_LOCAL_DIR" environment variable pointing to a writable directory
  ERROR
end

site_url = 'https://www.penny-arcade.com/comic'
feed_name = 'pennyarcade'
rss_file = Feed_local_dir.join("#{feed_name}.rss")

# get new comic
page = Nokogiri::HTML(URI.parse(site_url).open)
description_page_url = page.at('.comicTag a').attr('href')
description_page_url = description_page_url.sub('http', 'https') # needed while the comic page links to a description page with http (that then tries to redirect to https and makes open-uri choke)
description_page = Nokogiri::HTML(URI.parse(description_page_url).open)

comic_title = page.at('.comicTag h2').text
comic_link = description_page_url.sub('/news/post/', '/comic/')
comic_image = page.at('#comicFrame img').attr('src')
comic_description = description_page.at('.copy').inner_html

# create new feed (if it doesn't exist)
# or prepare existing one (checking if retried item is new)
if !File.file?(rss_file)
  tmp_feed = Nokogiri::XML::Builder.new do |xml|
    xml.rss('version' => '2.0') {
      xml.channel {
        xml.title 'Penny Arcade'
        xml.link site_url
        xml.description 'Penny Arcade comic'
      }
    }
  end
  rss_feed = Nokogiri::XML(tmp_feed.to_xml)
else
  rss_feed = Nokogiri::XML(rss_file.read)


  # abort if most recent item link is the same as the newly retrieved one
  # else save the most recent for later, and continue
  most_recent_item_link = rss_feed.at('item').at('link').content
  if most_recent_item_link == comic_link
    puts 'There are no new items to add'
    exit 0
  else
    recent_items = rss_feed.css('item')[0..9] # save recent items
    rss_feed.css('item').remove # removes all items
  end
end

# add new item to feed
Nokogiri::XML::Builder.with(rss_feed.at('channel')) do |xml|
  xml.item {
    xml.title comic_title
    xml.link comic_link
    xml.description "<img src='#{comic_image}'>#{comic_description}"
  }
end

# add previously grabbed items (if any) and save
rss_feed.at('channel').add_child(recent_items) unless recent_items.nil?
rss_file.write(rss_feed.to_xml)
