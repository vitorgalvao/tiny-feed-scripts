#!/usr/bin/env ruby

require 'open-uri'
require 'nokogiri'

site_url = 'https://affinity.serif.com/forum/index.php?/topic/842-affinity-designer-feature-roadmap/'
rss_file = ENV['HOME'] + '/public_html/vitorgalvao/rss/affinitydesignerroadmap.rss'

# parse post
page = Nokogiri::HTML(open(site_url))
post = page.at('div.post.entry-content')
post_text = post.inner_html
edited_date = post.at('p.edit').text.strip.sub("\n", ' ').gsub(%r{[\n\t]}, '')

# create new feed (if it doesn't exist)
# or prepare existing one (checking if retried item is new)
if !File.file?(rss_file)
  tmp_feed = Nokogiri::XML::Builder.new do |xml|
    xml.rss('version' => '2.0') {
      xml.channel {
        xml.title 'Affinity Designer Roadmap'
        xml.link site_url
        xml.description 'RSS feed of the first forum post of Affinity Designerâ€™s feature roadmap'
      }
    }
  end
  rss_feed = Nokogiri::XML(tmp_feed.to_xml)
else
  rss_feed = Nokogiri::XML(File.open(rss_file))

  # abort if most recent item title (edited date) is the same as the newly retrieved one
  # else save the most recent for later, and continue
  most_recent_item_title = rss_feed.at('item').at('title').content
  if (most_recent_item_title == edited_date)
    puts 'There are no new items to add'
    exit 0
  else
    recent_items = rss_feed.css('item')[0..9] # save recent items
    rss_feed.css('item').remove # removes all items
  end
end

# add new item to feed
Nokogiri::XML::Builder.with(rss_feed.at('channel')) do |xml|
  xml.item {
    xml.title edited_date
    xml.link site_url
    xml.description post_text
  }
end

# add previously grabbed items (if any) and save
rss_feed.at('channel').add_child(recent_items) unless recent_items.nil?

File.open(rss_file, 'w') do |f|
  f.puts rss_feed.to_xml
end
