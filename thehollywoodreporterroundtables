#!/usr/bin/env ruby

require 'json'
require 'nokogiri'
require 'open-uri'

# Require environment variables
abort 'You need to set a "FEED_EXPORT_LOCATION" environment variable pointing to a writable directory' unless ENV['FEED_EXPORT_LOCATION'] && Dir.exist?(ENV['FEED_EXPORT_LOCATION']) && File.writable?(ENV['FEED_EXPORT_LOCATION'])

abort 'You need to set a "FEED_ONLINE_LOCATION" environment variable pointing to the web directory path where the feed will be accessible from' unless ENV['FEED_ONLINE_LOCATION']

# Configure feed info
site_url = 'https://www.youtube.com/feeds/videos.xml?playlist_id=PLhKcXp78wsasvx-W9mZqEql3RB6xSciX4'
feed_title = 'The Hollywood Reporter Roundtables'
feed_name = 'thehollywoodreporterroundtables'

feed_file = File.join(ENV['FEED_EXPORT_LOCATION'], "#{feed_name}.json")
feed_location = File.join(ENV['FEED_ONLINE_LOCATION'], "#{feed_name}.json")

feed = {
  version: 'https://jsonfeed.org/version/1',
  title: feed_title,
  home_page_url: site_url,
  feed_url: feed_location
}

# Leave as is. Preparing the feed.
feed_new = {}
feed_new['items'] = []
feed_old = begin
             JSON.parse(File.read(feed_file))
           rescue StandardError
             { 'items' => [] }
           end
feed_old_first_url = begin
                       feed_old['items'][0]['url']
                     rescue StandardError
                       ''
                     end

# Strategy for getting new items
latest_issues = Nokogiri::XML(URI.parse(site_url).open).remove_namespaces!.css('entry').select { |e| e.at('title').text.match?('Roundtable') }

latest_issues.each do |issue|
  issue_url = issue.at('link').attr('href')

  # Stop adding once we reach the latest already present
  break if issue_url == feed_old_first_url

  issue_title = issue.at('title').text
  issue_thumbnail = issue.at('thumbnail').attr('url')
  issue_description = issue.at('description').text.sub(/\n.*/m, '')
  item_content = "<p>#{issue_description}</p><img src='#{issue_thumbnail}'>"

  feed_new['items'].push(title: issue_title, id: issue_url, url: issue_url, content_html: item_content)
end

# If there are no new items, inform and exit
if feed_new['items'].empty?
  puts 'There are no new items to add'
  exit 0
end

# Prepend new items to the old and limit the amount of items
feed['items'] = (feed_new['items'] + feed_old['items']).first(20)

File.write(feed_file, JSON.pretty_generate(feed))
