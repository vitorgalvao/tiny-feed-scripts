#!/usr/bin/env ruby

require 'nokogiri'
require 'open-uri'

# Required environment variables
Feed_local_dir = Pathname(ENV['FEED_LOCAL_DIR']) rescue nil

unless Feed_local_dir&.directory? && Feed_local_dir&.writable?
  abort <<~ERROR
    Missing a "FEED_LOCAL_DIR" environment variable pointing to a writable directory
  ERROR
end

base_url = 'https://www.nytimes.com'
site_url = base_url + '/video/op-docs'
feed_name = 'nytimesopdocs'
rss_file = Feed_local_dir.join("#{feed_name}.rss")

# get new video
page = Nokogiri::HTML(URI.parse(site_url).open)
latest_video = page.at('#recent-episodes-inner > ul').at('li')
video_link = base_url + latest_video.css('a')[1].attr('href')
video_title = latest_video.at('h3').text
video_duration = latest_video.at('h5').text.strip
item_title = video_title + ' (' + video_duration + ')'
video_image = latest_video.at('img').attr('data-src')

# create new feed (if it doesn't exist)
# or prepare existing one (checking if retried item is new)
if !File.file?(rss_file)
  tmp_feed = Nokogiri::XML::Builder.new do |xml|
    xml.rss('version' => '2.0') {
      xml.channel {
        xml.title 'New York Times Op-Docs'
        xml.link site_url
        xml.description 'RSS feed of New York Times Op-Docs'
      }
    }
  end
  rss_feed = Nokogiri::XML(tmp_feed.to_xml)
else
  rss_feed = Nokogiri::XML(rss_file.read)

  # abort if most recent item title is the same as the newly retrieved one
  # else save the most recent for later, and continue
  most_recent_item_title = rss_feed.at('item').at('title').content
  if most_recent_item_title == item_title
    puts 'There are no new items to add'
    exit 0
  else
    recent_items = rss_feed.css('item')[0..9] # save recent items
    rss_feed.css('item').remove # removes all items
  end
end

# add new item to feed
Nokogiri::XML::Builder.with(rss_feed.at('channel')) do |xml|
  xml.item {
    xml.title item_title
    xml.link video_link
    xml.description '<img src="' + video_image + '">'
  }
end

# add previously grabbed items (if any) and save
rss_feed.at('channel').add_child(recent_items) unless recent_items.nil?
rss_file.write(rss_feed.to_xml)
