#!/usr/bin/env ruby

require 'json'
require 'nokogiri'
require 'open-uri'

# Configure feed info
site_url = 'https://forum.affinity.serif.com/index.php?/search/&q=%22Affinity%20Designer%20Customer%20Beta%22&type=forums_topic&author=MattP&nodes=15&search_and_or=and&search_in=titles&sortby=newest'
feed_title = 'Affinity Designer Beta Features'
feed_name = 'affinity-designer-macos-beta-features'

feed_file = ENV['HOME'] + "/public_html/vitorgalvao/feeds/#{feed_name}.json"
feed_location = "https://vitorgalvao.com/feeds/#{feed_name}.json"

feed = {
  version: 'https://jsonfeed.org/version/1',
  title: feed_title,
  home_page_url: site_url,
  feed_url: feed_location
}

# Leave as is. Preparing the feed.
feed_new = {}
feed_new['items'] = []
feed_old = JSON.parse(File.read(feed_file)) rescue { 'items' => [] }
feed_old_first_url = feed_old['items'][0]['url'] rescue ''

# Strategy for getting new items
top_post = Nokogiri::HTML(URI.parse(site_url).open).at('li.ipsStreamItem h2 a')
post_url = top_post.attr('href').sub(/&do=.*/, '')

# If there are no new items, inform and exit
if post_url == feed_old_first_url
  puts 'There are no new items to add'
  exit 0
end

post = Nokogiri::HTML(URI.parse(post_url).open)
post_title = post.at('h1.ipsType_pageTitle').text.strip
post_content = post.at('article').at('div[data-role="commentContent"]').inner_html.strip

feed_new['items'].push(title: post_title, id: post_url, url: post_url, content_html: post_content)

# Prepend new items to the old and limit the amount of items
feed['items'] = (feed_new['items'] + feed_old['items']).first(20)

File.write(feed_file, JSON.pretty_generate(feed))
