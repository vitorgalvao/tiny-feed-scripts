#!/usr/bin/env ruby

require 'json'
require 'nokogiri'
require 'open-uri'
require 'pathname'

# Required environment variables
begin
  Feed_local_dir = Pathname(ENV['FEED_LOCAL_DIR'])
  Feed_web_dir = Pathname(ENV['FEED_WEB_DIR'])

  unless Feed_local_dir.directory? &&
         Feed_web_dir
    raise Errno::ENOENT
  end
rescue TypeError, Errno::ENOENT
  abort <<~ERROR
    Some required environment variables are not set correctly.
    Full list to verify:

    FEED_LOCAL_DIR: path to directory to read and write feed
    FEED_WEB_DIR: url to web directory hosting the feed
  ERROR
end

# Configure feed info
site_url = 'https://forum.affinity.serif.com/index.php?/search/&q=%22Affinity%20Designer%20Customer%20Beta%22&type=forums_topic&author=MattP&nodes=15&search_and_or=and&search_in=titles&sortby=newest'
feed_title = 'Affinity Designer Beta Features'
feed_name = 'affinity-designer-macos-beta-features'

feed_file = Feed_local_dir.join("#{feed_name}.json")
feed_location = Feed_web_dir.join("#{feed_name}.json")

feed = {
  version: 'https://jsonfeed.org/version/1',
  title: feed_title,
  home_page_url: site_url,
  feed_url: feed_location
}

# Leave as is. Preparing the feed.
feed_new = {}
feed_new['items'] = []
feed_old = JSON.parse(feed_file.read) rescue { 'items' => [] }
feed_old_first_url = feed_old['items'][0]['url'] rescue ''

# Strategy for getting new items
author = 'MattP'
post_url =
  Nokogiri::HTML(URI.parse(site_url).open)
  .css('li.ipsStreamItem')
  .select { |post| post.at('p.ipsStreamItem_status').text.include?("#{author} posted a topic in") }
  .first
  .at('h2 a')
  .attr('href').sub(/&do=.*/, '')

# If there are no new items, inform and exit
if post_url == feed_old_first_url
  puts 'There are no new items to add'
  exit 0
end

post = Nokogiri::HTML(URI.parse(post_url).open)
post_title = post.at('h1.ipsType_pageTitle').text.strip
post_content = post.at('article').at('div[data-role="commentContent"]').inner_html.strip

feed_new['items'].push(title: post_title, id: post_url, url: post_url, content_html: post_content)

# Prepend new items to the old and limit the amount of items
feed['items'] = (feed_new['items'] + feed_old['items']).first(20)

feed_file.write(JSON.pretty_generate(feed))
