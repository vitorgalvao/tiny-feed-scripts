#!/usr/bin/env ruby

require 'nokogiri'
require 'open-uri'
require 'rss'

# Required environment variables
begin
  Feed_local_dir = Pathname(ENV['FEED_LOCAL_DIR'])

  raise Errno::ENOENT unless Feed_local_dir.directory?
rescue TypeError, Errno::ENOENT
  abort <<~ERROR
    Some required environment variables are not set correctly.
    Full list to verify:

    FEED_LOCAL_DIR: path to directory to read and write feed
  ERROR
end

site_rss = 'https://www.theguardian.com/books/series/tom-gauld-s-cultural-cartoons/rss'
feed_name = 'tomgauldsculturalcartoons'
rss_file = Feed_local_dir.join("#{feed_name}.rss")

# get site rss feed
site_feed = RSS::Parser.parse(URI.parse(site_rss).open)
article_link = site_feed.items[0].link
article_title = site_feed.items[0].title
article_page = Nokogiri::HTML(URI.parse(article_link).open)
article_image = article_page.at('picture').at('source').attr('srcset').sub(%r{ \d+w$}, '')
article_description = article_page.at('.content__standfirst').inner_html

# create new feed (if it doesn't exist)
# or prepare existing one (checking if retried item is new)
if !File.file?(rss_file)
  tmp_feed = Nokogiri::XML::Builder.new do |xml|
    xml.rss('version' => '2.0') {
      xml.channel {
        xml.title 'Tom Gauld’s cultural cartoons'
        xml.link 'http://www.theguardian.com/books/series/tom-gauld-s-cultural-cartoons/'
        xml.description 'RSS feed of Tom Gauld’s cultural cartoons'
      }
    }
  end
  rss_feed = Nokogiri::XML(tmp_feed.to_xml)
else
  rss_feed = Nokogiri::XML(rss_file.read)

  # abort if most recent item link is the same as the newly retrieved one
  # else save the most recent for later, and continue
  most_recent_item_link = rss_feed.at('item').at('link').content
  if (most_recent_item_link == article_link)
    puts 'There are no new items to add'
    exit 0
  else
    recent_items = rss_feed.css('item')[0..9] # save recent items
    rss_feed.css('item').remove # removes all items
  end
end

# add new item to feed
Nokogiri::XML::Builder.with(rss_feed.at('channel')) do |xml|
  xml.item {
    xml.title article_title
    xml.link article_link
    xml.description "<img src='#{article_image}'>#{article_description}"
  }
end

# add previously grabbed items (if any) and save
rss_feed.at('channel').add_child(recent_items) unless recent_items.nil?
rss_file.write(rss_feed.to_xml)
